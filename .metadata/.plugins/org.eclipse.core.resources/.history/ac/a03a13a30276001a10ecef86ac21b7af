/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000100;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}

/**
 * Converts a char to the lower Hex
 * @param  c   Char to be split
 * @return     Hex Value
 */
char charLower(char c){
	return c&(0xF);
}

/**
 * Converts char to the higher Hex
 * @param  c Char to be split
 * @return   Hex Value
 */
char charHigher(char c){
	return c>>4;
}

/** encrypt
 *  Perform AES encryption in software.
 *
 *  Input: msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *         key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *               key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key)
{
	unsigned char state[4][4];
	unsigned char* curChar = msg_ascii;		//needs unsigned 
	int i,j;
	for(i = 0; i < 4; i++){
		for(j = 0; j < 4; j++){
			state[i][j] = charsToHex(*curChar, *(curChar+1));
			curChar += 2;
		}
	}
	
	unsigned char* curKey = key_ascii;
	int i,j;
	for(i = 0; i < 4; i++){
		for(j = 0; j < 4; j++){
			key[4*i+j] = charsToHex(*curChar, *(curChar+1));
			curKey += 2;
		}
	}
	
	unsigned int* keySchedule;
	
	keyExpansion(key, keySchedule);
	addRoundKey(state, keySchedule, 0);

	for(i = 1; i <= 9; i++){
		subBytes(state);
		shiftRows(state);
		mixColumns(state);
		addRoundKey(state, keySchedule, i);
	}
	subBytes(state);
	shiftRows(state);
	addRoundKey(state, keySchedule, 10);

	msg_enc = state;	
}

/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key)
{
	// Implement this function
}

void keyExpansion(unsigned int* key, unsigned int* keySchedule){
	unsigned int* temp;
	int i;
	for (i = 0; i<4 ; i++){
		keySchedule[i] = (key[4*0+i]<<24)+(key[4*1+i]<<16)+(key[4*2+i]<<8)+key[4*3+i];
	}
	for (i = 4; i<4*11; i++){
		*temp = keySchedule[i-1];
		if (i % 4 == 0){
			RotWord(temp);
			SubWord(temp);
			temp ^= Rcon[i/4];
		}
		keySchedule[i] = KeySchedule[i-4] ^ temp;
	}
}

void SubWord(unsigned int* object){
	unsigned char curChar [4];
	unsigned char mid [4];
	int i;
	for (i = 0; i<4;  i++){
		curChar[i] = (*object)>>((3-i)*8)&(0xFF);
		char x = charLower(curChar[i]);
		char y = charHigher(curChar[i]);
		mid[i] = aes_sbox[x+y*16];
	}
	*object = 0;
	for (i = 0; i<4; i++){
		*object += mid[i]<<(8*(3-i));
	}
}

void RotWord(unsigned int* object){
	unsigned char curChar [4];
	unsigned char mid [4];
	int i;
	for (i = 0; i<4;  i++){
		curChar[i] = (*object)>>((3-i)*8);
	}

	for (i = 0; i<4; i++){
		*object += curChar((i+1)%4)<<(8*(3-i));
	}

}

void addRoundKey(unsigned char* state, unsigned int* keySchedule, int round){
	int i,j;
	unsigned char temp[4][4];
	for (i = 0; i<4;  i++){
		for (j = 0; j<4; j++){
			temp[j][i] = KeySchedule[round*4+i]>>((3-j)*8)&(0xFF);
		}
	}

	for (i = 0; i<4; i++){
		for (j = 0; j<4; j++){
			state[i+j*4] = state[i+j*4] ^ temp[i+j*4];
		}
	}
}

void subBytes(unsigned char* state){
	int i, j;
	for(i = 0; i < 4; i++){
		for(j = 0; j < 4; j++){
			char x = charLower(state[i][j]);
			char y = charHigher(state[i][j]);
			state[i][j] = aes_sbox[x+y*16];
		}
	}
}

void shiftRows(unsigned char* state){
	int i, j;
	unsigned char stateCopy[4][4];

	for(i = 0; i < 4; i++){
		for(j = 0; j < 4; j++){
			stateCopy[j][i] = state[j][i];
		}
	}

	for(j = 1; j < 4; j++){
		for(i = 0; i < 4; i++){
			state[j][i] = stateCopy[j][(i+j)%4];
		}
	}
}

void mixColumns(unsigned char* state){
	int i, j, x;

	for(i = 0; i < 4; i++){
		for(j = 0; j < 4; j++){
			unsigned char sum = 0;
			for(x = 0; x < 4; x++){
				if(RGF[j][x] == 1)
					sum ^= state[j][i];
				else
					sum ^= gf_mul[state[j][i]][RGF[j][x]];
			}
			state[j][i] = sum;
		}
	}
}



/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}
	return 0;
}
